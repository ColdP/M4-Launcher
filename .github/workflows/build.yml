# 工作流程的名稱
name: Build Electron App

# 工作流程的觸發時機
on:
  # 當有程式碼推送到 main 分支時觸發
  push:
    branches:
      - "main"
  # 允許手動從 GitHub Actions 頁面觸發
  workflow_dispatch:

# 定義工作流程中的任務
jobs:
  # 建立一個名為 "build" 的任務
  build:
    # 使用策略矩陣 (strategy matrix) 在多個作業系統上執行此任務
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # 指定任務運行的虛擬機環境
    runs-on: ${{ matrix.os }}

    # 任務執行的步驟
    steps:
      # 步驟一：簽出 (Checkout) 你的程式碼
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟二：設定 Node.js 環境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 建議使用一個 LTS (長期支援) 版本
          cache: 'npm' # 為 npm 設定快取，加速後續的安裝

      # 步驟三：安裝專案依賴
      # 使用 npm ci 會比 npm install 更快且更適合在 CI/CD 環境中使用
      - name: Install dependencies
        run: npm ci

      # 步驟四：打包應用程式
      # 執行您 package.json 中的 "make" 指令
      # Electron Forge 會根據當前運行的作業系統，自動選擇 forge.config.js 中對應的 maker
      - name: Build application
        run: npm run make

      # 步驟五：上傳打包好的成品 (Artifacts)
      # 將 out/make 目錄下的所有檔案上傳
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # 成品的名稱，會包含作業系統，例如 "build-windows-latest"
          name: build-${{ matrix.os }}
          # 要上傳的檔案路徑
          path: out/make/**/*
